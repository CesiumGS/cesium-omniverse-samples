#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (342745.6028626797, 11748.42887404895, -204345.73737074246)
                double3 target = (32425.716704079823, -8771.518052217823, -252009.76916704903)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./SanFrancisco.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:domeLight:enabledInReflections" = 1
            bool "rtx:fog:enabled" = 1
            float3 "rtx:fog:fogColor" = (0.60392, 0.75294, 0.9098)
            double "rtx:fog:fogColorIntensity" = 0.25
            double "rtx:fog:fogDistanceDensity" = 0.0005
            double "rtx:fog:fogEndDist" = 500000
            double "rtx:fog:fogHeightDensity" = 0.2
            double "rtx:fog:fogHeightFalloff" = 0
            double "rtx:fog:fogStartDist" = 100000
            double "rtx:fog:fogStartHeight" = 6000
            bool "rtx:indirectDiffuse:enabled" = 1
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (5, 5, 5)
            bool "rtx:post:lensFlares:enabled" = 1
            double "rtx:post:lensFlares:flareScale" = 0.25
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            double "rtx:post:tonemap:irayReinhard:burnHighlights" = 1
            double "rtx:post:tonemap:irayReinhard:crushBlacks" = 0
            double "rtx:post:tonemap:irayReinhard:saturation" = 1.1
            int "rtx:post:tonemap:op" = 7
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    token visibility = "inherited"

    def "default_water" (
        instanceable = false
        delete references = @../../shared_resources/water/default_water.usd@
        prepend references = @../../shared_resources/water/default_water.usda@
    )
    {
        token visibility = "inherited"
    }

    def DomeLight "DomeLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float intensity = 1000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        asset texture:file = @../../shared_resources/skies/syferfontein_18d_clear_puresky_4k.exr@
        token texture:format = "latlong"
        bool visibleInPrimaryRay = 1
        double3 xformOp:rotateXYZ = (270, -178, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def "zoom_to_sf" (
        instanceable = false
        delete references = @../../tutorials/03_capturing_image_and_video/camera_anims/zoom_to_sf.usd@
        prepend references = @../../tutorials/03_capturing_image_and_video/camera_anims/zoom_to_sf.usda@
    )
    {
    }

    def "waterfront_sf" (
        instanceable = false
        delete references = @../../tutorials/03_capturing_image_and_video/camera_anims/waterfront_sf.usd@
        prepend references = @../../tutorials/03_capturing_image_and_video/camera_anims/waterfront_sf.usda@
    )
    {
    }
}

def Xform "Environment"
{
    int ground:size = 1400
    string ground:type = "On"
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "Grid"
        {
            token outputs:mdl:displacement.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Environment/Looks/Grid/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_add = 0
                float inputs:albedo_brightness = 0.52
                float inputs:albedo_desaturation = 1
                asset inputs:diffuse_texture = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Assets/Scenes/Templates/Default/SubUSDs/textures/ov_uv_grids_basecolor_1024.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                )
                bool inputs:project_uvw = 0
                float inputs:reflection_roughness_constant = 0.333
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                )
                float2 inputs:texture_scale = (0.5, 0.5) (
                    customData = {
                        float2 default = (1, 1)
                    }
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "concrete_precast_light_gray"
        {
            token outputs:mdl:displacement.connect = </Environment/Looks/concrete_precast_light_gray/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Environment/Looks/concrete_precast_light_gray/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Environment/Looks/concrete_precast_light_gray/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/vMaterials_2/Concrete/Concrete_Precast.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "concrete_precast_light_gray"
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Mesh "ground"
    {
        float3[] extent = [(-1400, -1400, 0), (1400, 1400, 0)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [5, 0, 6, 1, 6, 0, 6, 1, 7, 2, 7, 1, 7, 2, 8, 3, 8, 2, 8, 3, 9, 4, 9, 3, 10, 5, 11, 6, 11, 5, 11, 6, 12, 7, 12, 6, 12, 7, 13, 8, 13, 7, 13, 8, 14, 9, 14, 8, 15, 10, 16, 11, 16, 10, 16, 11, 17, 12, 17, 11, 17, 12, 18, 13, 18, 12, 18, 13, 19, 14, 19, 13, 20, 15, 21, 16, 21, 15, 21, 16, 22, 17, 22, 16, 22, 17, 23, 18, 23, 17, 23, 18, 24, 19, 24, 18]
        rel material:binding = </Environment/Looks/concrete_precast_light_gray> (
            bindMaterialAs = "strongerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-700, -700, 0), (-350, -700, 0), (0, -700, 0), (350, -700, 0), (700, -700, 0), (-700, -350, 0), (-350, -350, 0), (0, -350, 0), (350, -350, 0), (700, -350, 0), (-700, 0, 0), (-350, 0, 0), (0, 0, 0), (350, 0, 0), (700, 0, 0), (-700, 350, 0), (-350, 350, 0), (0, 350, 0), (350, 350, 0), (700, 350, 0), (-700, 700, 0), (-350, 700, 0), (0, 700, 0), (350, 700, 0), (700, 700, 0)]
        bool primvars:isMatteObject = 0
        float2[] primvars:st = [(-20.10899, -29.765083), (-16.608992, -29.765085), (-13.108992, -29.765085), (-9.608991, -29.765085), (-6.1089907, -29.765089), (-20.10899, -26.265083), (-16.60899, -26.265085), (-13.108992, -26.265085), (-9.60899, -26.265085), (-6.1089897, -26.265089), (-20.10899, -22.765083), (-16.60899, -22.765087), (-13.10899, -22.765087), (-9.60899, -22.765087), (-6.1089897, -22.765089), (-20.10899, -19.265083), (-16.60899, -19.265087), (-13.108988, -19.265087), (-9.60899, -19.265087), (-6.1089897, -19.265089), (-20.10899, -15.765083), (-16.608988, -15.765086), (-13.108988, -15.765086), (-9.608989, -15.765086), (-6.108989, -15.765089)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [5, 0, 6, 1, 6, 0, 6, 1, 7, 2, 7, 1, 7, 2, 8, 3, 8, 2, 8, 3, 9, 4, 9, 3, 10, 5, 11, 6, 11, 5, 11, 6, 12, 7, 12, 6, 12, 7, 13, 8, 13, 7, 13, 8, 14, 9, 14, 8, 15, 10, 16, 11, 16, 10, 16, 11, 17, 12, 17, 11, 17, 12, 18, 13, 18, 12, 18, 13, 19, 14, 19, 13, 20, 15, 21, 16, 21, 15, 21, 16, 22, 17, 22, 16, 22, 17, 23, 18, 23, 17, 23, 18, 24, 19, 24, 18]
        uniform token subdivisionScheme = "none"
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (-90, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }
}

def CesiumDataPrim "Cesium"
{
    double cesium:georeferenceOrigin:height = 0
    double cesium:georeferenceOrigin:latitude = 37.7749
    double cesium:georeferenceOrigin:longitude = -122.4194
    string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxOWM2Yzg4Zi0yMDEzLTQ0N2UtYmU0Mi0yNWE3ZDRhNWNkZWIiLCJpZCI6MjU5LCJpYXQiOjE2NzkzNTY0MzF9.2TSzbyOKl0I6fMfcDb-Q7ari3LGLf-tpLEIBUMOKUM8"
    string cesium:projectDefaultIonAccessTokenId = ""
}

def Xform "Cesium_World_Terrain" (
    prepend apiSchemas = ["CesiumTilesetSchemaAPI"]
)
{
    float cesium:culledScreenSpaceError = 64
    bool cesium:enableFogCulling = 1
    bool cesium:enableFrustumCulling = 1
    bool cesium:enforceCulledScreenSpaceError = 1
    bool cesium:forbidHoles = 0
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    uint cesium:loadingDescendantLimit = 20
    uint64 cesium:maximumCachedBytes = 536870912
    float cesium:maximumScreenSpaceError = 16
    uint cesium:maximumSimultaneousTileLoads = 20
    bool cesium:preloadAncestors = 1
    bool cesium:preloadSiblings = 1
    bool cesium:smoothNormals = 0
    bool cesium:suspendUpdate = 0
    string cesium:url
    token visibility = "inherited"
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, -100, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def CesiumImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
    }
}

over "OmniverseKit_Persp"
{
    float2 clippingRange = (1, 10000000000)
    float focalLength = 17
}

def Xform "Aerometrex_San_Francisco_High_Resolution_3D_Model_with_Street_Level_Enhanced_3D_Non_Commercial_Trial_" (
    prepend apiSchemas = ["CesiumTilesetSchemaAPI"]
)
{
    float cesium:culledScreenSpaceError = 64
    bool cesium:enableFogCulling = 1
    bool cesium:enableFrustumCulling = 1
    bool cesium:enforceCulledScreenSpaceError = 1
    bool cesium:forbidHoles = 0
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1415196
    uint cesium:loadingDescendantLimit = 20
    uint64 cesium:maximumCachedBytes = 536870912
    float cesium:maximumScreenSpaceError = 4
    uint cesium:maximumSimultaneousTileLoads = 20
    bool cesium:preloadAncestors = 1
    bool cesium:preloadSiblings = 1
    bool cesium:smoothNormals = 0
    bool cesium:suspendUpdate = 0
    string cesium:url
    token visibility = "inherited"
}

