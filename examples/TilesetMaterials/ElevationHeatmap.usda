#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (197036.64254137815, 191641.79092762904, 593772.7086077139)
                double3 target = (19158.94021321481, 71087.98646241006, -14231.668831528747)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            uint64 ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./ElevationHeatmap.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:domeLight:enabledInReflections" = 1
            float3 "rtx:fog:fogColor" = (0.8901961, 0.7761547, 0.5163138)
            double "rtx:fog:fogColorIntensity" = 0.2
            double "rtx:fog:fogDistanceDensity" = 0.00003
            double "rtx:fog:fogEndDist" = 10000000
            double "rtx:fog:fogHeightDensity" = 0.05
            double "rtx:fog:fogHeightFalloff" = 0
            double "rtx:fog:fogStartDist" = 1000000
            double "rtx:fog:fogStartHeight" = 100000
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            bool "rtx:newDenoiser:enabled" = 1
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            bool "rtx:post:chromaticAberration:enabled" = 1
            double "rtx:post:chromaticAberration:strengthB" = 0.0015
            double "rtx:post:chromaticAberration:strengthG" = -0.0075
            double "rtx:post:chromaticAberration:strengthR" = -0.0055
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            bool "rtx:post:colorcorr:enabled" = 1
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1.1, 1.1, 1.1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            bool "rtx:post:colorgrad:enabled" = 1
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            double "rtx:post:histogram:whiteScale" = 1.029999976977706
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2000, 2000, 2000)
            bool "rtx:post:lensFlares:enabled" = 1
            double "rtx:post:lensFlares:flareScale" = 0.4
            double "rtx:post:lensFlares:focalLength" = 17
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            bool "rtx:post:motionblur:enabled" = 1
            double "rtx:post:tonemap:filmIso" = 35
            double "rtx:post:tonemap:irayReinhard:burnHighlights" = 0.7
            int "rtx:post:tonemap:op" = 7
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 240
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def "VancouverCamera" (
        instanceable = false
        prepend references = @../Vancouver/cameras/VancouverCamera.usda@
    )
    {
    }

    def Scope "Looks"
    {
        def Material "OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (1.14, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_color_constant.connect = </World/Looks/OmniPBR/cesium_lookup_world_texture_color.outputs:out>
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "cesium_lookup_world_texture_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_lookup_world_texture_color"
                float2 inputs:max_world = (10000, 15000) (
                    customData = {
                        float2 default = (5000, 5000)
                    }
                    hidden = false
                    renderType = "float2"
                )
                float2 inputs:min_world = (0, 0) (
                    customData = {
                        float2 default = (-5000, -5000)
                    }
                    hidden = false
                    renderType = "float2"
                )
                asset inputs:texture = @../../shared_resources/textures/elevation_gradient.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:up_axis = 1 (
                    customData = {
                        int default = 0
                    }
                    hidden = false
                    renderType = "up_axis_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "Y"
                        string options = "Y:0|Z:1"
                    }
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-949.1876, 76.043976)
            }
        }

        def Material "OmniPBR_Terrain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBR_Terrain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBR_Terrain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBR_Terrain/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = """This is the albedo base color

"""
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_color_constant.connect = </World/Looks/OmniPBR_Terrain/lerp.outputs:out>
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "cesium_imagery_layer_float4" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_imagery_layer_float4"
                token inputs:imagery_layer (
                    connectability = "interfaceOnly"
                    hidden = true
                    renderType = "gltf_texture_lookup_value"
                )
                int inputs:imagery_layer_index (
                    customData = {
                        int default = 0
                    }
                    doc = """This parameter is unused.
"""
                    hidden = false
                    renderType = "int"
                )
                float4 outputs:out (
                    renderType = "float4"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1505.4586, 264.52295)
            }

            def Shader "construct_color_01" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "construct_color(float3)"
                float3 inputs:a (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "float3"
                )
                float3 inputs:a.connect = </World/Looks/OmniPBR_Terrain/xyz.outputs:out>
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1006.1841, 181.51408)
            }

            def Shader "xyz" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/aux_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "xyz(float4)"
                float4 inputs:a (
                    customData = {
                        float4 default = (0, 0, 0, 0)
                    }
                    hidden = false
                    renderType = "float4"
                )
                float4 inputs:a.connect = </World/Looks/OmniPBR_Terrain/cesium_imagery_layer_float4.outputs:out>
                float3 outputs:out (
                    renderType = "float3"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1221.0394, 257.149)
            }

            def Shader "cesium_lookup_world_texture_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @cesium.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "cesium_lookup_world_texture_color"
                float2 inputs:max_world = (15000, 150000) (
                    customData = {
                        float2 default = (5000, 5000)
                    }
                    hidden = false
                    renderType = "float2"
                )
                float2 inputs:min_world = (-2000, -2000) (
                    customData = {
                        float2 default = (-5000, -5000)
                    }
                    hidden = false
                    renderType = "float2"
                )
                asset inputs:texture = @../../shared_resources/textures/elevation_gradient.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:up_axis = 1 (
                    customData = {
                        int default = 0
                    }
                    hidden = false
                    renderType = "up_axis_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "Y"
                        string options = "Y:0|Z:1"
                    }
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1436.8226, -245.78476)
            }

            def Shader "lerp" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "lerp(color,color,float)"
                color3f inputs:a (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:a.connect = </World/Looks/OmniPBR_Terrain/cesium_lookup_world_texture_color.outputs:out>
                color3f inputs:b (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:b.connect = </World/Looks/OmniPBR_Terrain/construct_color_01.outputs:out>
                float inputs:l = 0.75 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    hidden = false
                    renderType = "float"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-764.7371, 55.47331)
            }
        }
    }
}

def CesiumDataPrim "Cesium"
{
    string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwNzhiNWNjOS1iYmUyLTQ5MTYtODliYy0zMTc3NTJmZTk4MWIiLCJpZCI6MjU5LCJpYXQiOjE2OTYyNzYzNzF9.ooL73wypb9IdmEz4zD3MN87rLtEYo1tEgavGzaC5UM8"
    string cesium:projectDefaultIonAccessTokenId = ""
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
    double cesium:georeferenceOrigin:height = 0
    double cesium:georeferenceOrigin:latitude = 49.2827
    double cesium:georeferenceOrigin:longitude = -123.1207
}

def CesiumTilesetPrim "Cesium_World_Terrain" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638713700, -1273161300, -640828860), (638713700, -10880, 636598600)]
    rel material:binding = </World/Looks/OmniPBR_Terrain> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def CesiumImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
    }
}

over "OmniverseKit_Persp"
{
    float2 clippingRange = (1, 10000000000)
    float focalLength = 17
}

def CesiumTilesetPrim "Cesium_OSM_Buildings" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 96188
    float cesium:maximumScreenSpaceError = 8
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638410430, -1268745300, -640032300), (638410430, -5573120, 636788540)]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
}

def Xform "Environment"
{
    custom float location:latitude = 49.2827
    custom float location:longitude = -123.1207
    custom float location:north_orientation = 90
    custom float time:current = 8.099054

    def Xform "sky" (
        prepend references = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Environments/2023_1/DomeLights/Dynamic/CloudySky.usd@
    )
    {
        float3 xformOp:rotateZYX = (0, 0, 0)

        over "AxisNorth"
        {
            double3 xformOp:rotateZYX = (0, 90, 0)

            over "AxisLatitude"
            {
                double3 xformOp:rotateZYX = (0, 0, 49.28269958496094)

                over "AxisSHA"
                {
                    double3 xformOp:rotateZYX = (238.8576505517434, 0, 0)

                    over "AxisDeclination"
                    {
                        double3 xformOp:rotateZYX = (0, 0, 7.999834338981633)

                        over "DistantLight"
                        {
                            color3f inputs:color = (1, 0.98, 0.95)
                            float inputs:intensity = 5000
                        }
                    }
                }
            }

            over "AxisAzimuth"
            {
                double3 xformOp:rotateZYX = (0, -109.33434796123257, 0)

                over "AxisElevation"
                {
                    double3 xformOp:rotateZYX = (0, 0, 26.075864204957885)
                }
            }
        }

        over "DomeLight"
        {
            float3 xformOp:rotateZYX = (270, 0, 90)
        }

        over "Looks"
        {
            over "SkyMaterial"
            {
                over "Shader"
                {
                    float inputs:Azimuth = -109.33435
                    custom float inputs:CloudCoverage = 0
                    custom bool inputs:CumulusEnabled = 0
                    float inputs:DayOfYear = 100
                    float inputs:Declination = 7.9998345
                    float inputs:Elevation = 26.075865
                    custom float inputs:haze = 0
                    float inputs:Latitude = 49.2827
                    float inputs:Longitude = -123.1207
                    float inputs:NorthOrientation = 90
                    float inputs:SHA = -58.85765
                    float inputs:TimeOfDay = 6.93
                }
            }
        }
    }
}

