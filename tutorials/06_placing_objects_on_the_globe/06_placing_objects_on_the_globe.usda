#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (265819.19125579984, 504.5147706109524, -181149.67115281403)
                double3 target = (255589.38526739719, -2037.7226735810464, -183401.82349178477)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary metricsAssembler = {
            dictionary "/World/Black_Oak" = {
            }
            dictionary "/World/tree_01" = {
            }
            dictionary "/World/tree_02" = {
            }
            dictionary "/World/tree_03" = {
            }
            dictionary "/World/tree_04" = {
            }
            int version = 1
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./06_placing_objects_on_the_globe.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def Xform "tree_01" (
        prepend apiSchemas = ["CesiumGlobeAnchorSchemaAPI"]
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Vegetation/Plant_Tropical/Cuban_Royal_Palm.usd@
    )
    {
        double3 cesium:anchor:geographicCoordinates = (37.7913, -122.39032, -28.88791)
        prepend rel cesium:anchor:georeferenceBinding = </CesiumGeoreference>
        double3 cesium:anchor:position = (-2703402.189906512, -4261471.435157978, 3887146.4162855553)
        double3 cesium:anchor:rotation = (47.43848419189453, -25.044580459594727, -21.260974884033203)
        double3 cesium:anchor:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double xformOp:rotateX:unitsResolve = -90
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        matrix4d xformOp:transform:cesium = ( (0.9999998972028922, -0.0004011118535415147, 5.045745107574561e-8, 0), (-6.43950214818112e-8, -0.00028633524975624214, -0.9999999366543166, 0), (0.00040111185154606543, 0.9999998562089508, -0.00028633525255150616, 0), (256137.76995182037, -2966.2198885679245, -182066.48429769278, 1) )
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale", "xformOp:transform:cesium"]
    }

    def Xform "tree_02" (
        prepend apiSchemas = ["CesiumGlobeAnchorSchemaAPI"]
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Vegetation/Plant_Tropical/Cuban_Royal_Palm.usd@
    )
    {
        double3 cesium:anchor:geographicCoordinates = (37.79114, -122.39018, -28.88791)
        prepend rel cesium:anchor:georeferenceBinding = </CesiumGeoreference>
        double3 cesium:anchor:position = (-2703397.606610751, -4261487.230029306, 3887132.3824729566)
        double3 cesium:anchor:rotation = (47.43869400024414, -25.04453468322754, -21.260887145996094)
        double3 cesium:anchor:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double xformOp:rotateX:unitsResolve = -90
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        matrix4d xformOp:transform:cesium = ( (0.9999998964261534, -0.0004030436662491352, 5.017129928842163e-8, 0), (-6.410905173392933e-8, -0.0002835433250473196, -0.9999999374498458, 0), (0.0004030436642729063, 0.999999856227741, -0.0002835433278560173, 0), (257371.45026627183, -2966.210052371025, -180290.99635195732, 1) )
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale", "xformOp:transform:cesium"]
    }

    def Xform "tree_03" (
        prepend apiSchemas = ["CesiumGlobeAnchorSchemaAPI"]
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Vegetation/Plant_Tropical/Cuban_Royal_Palm.usd@
    )
    {
        double3 cesium:anchor:geographicCoordinates = (37.79147, -122.39042, -28.88791)
        prepend rel cesium:anchor:georeferenceBinding = </CesiumGeoreference>
        double3 cesium:anchor:position = (-2703403.4337169975, -4261456.95326097, 3887161.327178562)
        double3 cesium:anchor:rotation = (47.43828201293945, -25.044591903686523, -21.261062622070312)
        double3 cesium:anchor:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double xformOp:rotateX:unitsResolve = -90
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        matrix4d xformOp:transform:cesium = ( (0.9999998977555393, -0.0003997316910541529, 5.0852863321335096e-8, 0), (-6.479027675476701e-8, -0.0002893018810705694, -0.999999935800465, 0), (0.0003997316890380631, 0.9999998559077463, -0.00028930188385600797, 0), (255256.38131523132, -2966.4099085330963, -183953.07524228096, 1) )
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale", "xformOp:transform:cesium"]
    }

    def Xform "tree_04" (
        prepend apiSchemas = ["CesiumGlobeAnchorSchemaAPI"]
        prepend payload = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Vegetation/Plant_Tropical/Cuban_Royal_Palm.usd@
    )
    {
        double3 cesium:anchor:geographicCoordinates = (37.79167, -122.39053, -28.88791)
        prepend rel cesium:anchor:georeferenceBinding = </CesiumGeoreference>
        double3 cesium:anchor:position = (-2703404.3281798274, -4261440.276511508, 3887178.869362261)
        double3 cesium:anchor:rotation = (47.43803787231445, -25.044599533081055, -21.26116371154785)
        double3 cesium:anchor:scale = (0.009999999776482582, 0.009999999776482582, 0.009999999776482582)
        double xformOp:rotateX:unitsResolve = -90
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        matrix4d xformOp:transform:cesium = ( (0.9999998983612763, -0.00039821344958664603, 5.132825798867904e-8, 0), (-6.526549217733546e-8, -0.00029279206999444085, -0.999999934784656, 0), (0.0003982134475462584, 0.9999998554976741, -0.0002927920727693323, 0), (254286.81392076612, -2966.669009208679, -186172.61606276035, 1) )
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale", "xformOp:transform:cesium"]
    }
}

def Xform "Environment"
{
    int ground:size = 1400
    string ground:type = "On"
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def DomeLight "Sky" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float colorTemperature = 6250
        bool enableColorTemperature = 1
        float exposure = 9
        float intensity = 1
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        asset texture:file = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Assets/Scenes/Templates/Default/SubUSDs/textures/CarLight_512x256.hdr@
        token texture:format = "latlong"
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (-90, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 305, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def DistantLight "DistantLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 2.5
        float colorTemperature = 7250
        bool enableColorTemperature = 1
        float exposure = 10
        float intensity = 1
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "inherited"
        double3 xformOp:rotateXYZ = (-90, 0, -15)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 305, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "Grid"
        {
            token outputs:mdl:displacement.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Environment/Looks/Grid/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Environment/Looks/Grid/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_add = 0
                float inputs:albedo_brightness = 0.52
                float inputs:albedo_desaturation = 1
                asset inputs:diffuse_texture = @https://omniverse-content-production.s3.us-west-2.amazonaws.com/Assets/Scenes/Templates/Default/SubUSDs/textures/ov_uv_grids_basecolor_1024.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                )
                bool inputs:project_uvw = 0
                float inputs:reflection_roughness_constant = 0.333
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                )
                float2 inputs:texture_scale = (0.5, 0.5) (
                    customData = {
                        float2 default = (1, 1)
                    }
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Ground"
        {
            token outputs:mdl:displacement.connect = </Environment/Looks/Ground/Shader.outputs:out>
            token outputs:mdl:surface.connect = </Environment/Looks/Ground/Shader.outputs:out>
            token outputs:mdl:volume.connect = </Environment/Looks/Ground/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @../../../../../_nucleus/kit/usd.composer/2023.2/exts/3/omni.kit.environment.core-1.3.3/data/Ground.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Ground"
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Mesh "ground" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-1400, -1400, 0), (1400, 1400, 0)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [5, 0, 6, 1, 6, 0, 6, 1, 7, 2, 7, 1, 7, 2, 8, 3, 8, 2, 8, 3, 9, 4, 9, 3, 10, 5, 11, 6, 11, 5, 11, 6, 12, 7, 12, 6, 12, 7, 13, 8, 13, 7, 13, 8, 14, 9, 14, 8, 15, 10, 16, 11, 16, 10, 16, 11, 17, 12, 17, 11, 17, 12, 18, 13, 18, 12, 18, 13, 19, 14, 19, 13, 20, 15, 21, 16, 21, 15, 21, 16, 22, 17, 22, 16, 22, 17, 23, 18, 23, 17, 23, 18, 24, 19, 24, 18]
        rel material:binding = </Environment/Looks/Ground> (
            bindMaterialAs = "strongerThanDescendants"
        )
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-700, -700, 0), (-350, -700, 0), (0, -700, 0), (350, -700, 0), (700, -700, 0), (-700, -350, 0), (-350, -350, 0), (0, -350, 0), (350, -350, 0), (700, -350, 0), (-700, 0, 0), (-350, 0, 0), (0, 0, 0), (350, 0, 0), (700, 0, 0), (-700, 350, 0), (-350, 350, 0), (0, 350, 0), (350, 350, 0), (700, 350, 0), (-700, 700, 0), (-350, 700, 0), (0, 700, 0), (350, 700, 0), (700, 700, 0)]
        texCoord2f[] primvars:st = [(-20.10899, -29.765083), (-16.608992, -29.765085), (-13.108992, -29.765085), (-9.608991, -29.765085), (-6.1089907, -29.765089), (-20.10899, -26.265083), (-16.60899, -26.265085), (-13.108992, -26.265085), (-9.60899, -26.265085), (-6.1089897, -26.265089), (-20.10899, -22.765083), (-16.60899, -22.765087), (-13.10899, -22.765087), (-9.60899, -22.765087), (-6.1089897, -22.765089), (-20.10899, -19.265083), (-16.60899, -19.265087), (-13.108988, -19.265087), (-9.60899, -19.265087), (-6.1089897, -19.265089), (-20.10899, -15.765083), (-16.608988, -15.765086), (-13.108988, -15.765086), (-9.608989, -15.765086), (-6.108989, -15.765089)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [5, 0, 6, 1, 6, 0, 6, 1, 7, 2, 7, 1, 7, 2, 8, 3, 8, 2, 8, 3, 9, 4, 9, 3, 10, 5, 11, 6, 11, 5, 11, 6, 12, 7, 12, 6, 12, 7, 13, 8, 13, 7, 13, 8, 14, 9, 14, 8, 15, 10, 16, 11, 16, 10, 16, 11, 17, 12, 17, 11, 17, 12, 18, 13, 18, 12, 18, 13, 19, 14, 19, 13, 20, 15, 21, 16, 21, 15, 21, 16, 22, 17, 22, 16, 22, 17, 23, 18, 23, 17, 23, 18, 24, 19, 24, 18]
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (-90, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }
}

def CesiumDataPrim "Cesium"
{
    rel cesium:selectedIonServer = </CesiumServers/IonOfficial>
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
    double cesium:georeferenceOrigin:height = 0
    double cesium:georeferenceOrigin:latitude = 37.7749
    double cesium:georeferenceOrigin:longitude = -122.4194
}

def CesiumTilesetPrim "Cesium_World_Terrain"
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 1
    rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638713700, -1273587300, -640783700), (638713700, -436864, 636643800)]

    def CesiumImageryPrim "Bing_Maps_Aerial_imagery"
    {
        string cesium:ionAccessToken = ""
        int64 cesium:ionAssetId = 2
        rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    }
}

def CesiumTilesetPrim "Cesium_OSM_Buildings"
{
    prepend rel cesium:georeferenceBinding = </CesiumGeoreference>
    string cesium:ionAccessToken = ""
    int64 cesium:ionAssetId = 96188
    rel cesium:ionServerBinding = </CesiumServers/IonOfficial>
    uniform token cesium:sourceType = "ion"
    float3[] extent = [(-638410430, -1269061400, -639882700), (638410430, -5889216, 636938200)]
}

over "OmniverseKit_Persp"
{
    float2 clippingRange = (1, 10000000000)
    float focalLength = 17
}

def "CesiumServers"
{
    def CesiumIonServerPrim "IonOfficial"
    {
        string cesium:displayName = "ion.cesium.com"
        string cesium:ionServerApiUrl = "https://api.cesium.com/"
        int64 cesium:ionServerApplicationId = 413
        string cesium:ionServerUrl = "https://ion.cesium.com/"
        string cesium:projectDefaultIonAccessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkOWU3ZmQwMy0xOTk0LTQxYWYtOGMyMS1mMmU1M2Y0OTIwYzIiLCJpZCI6MjU5LCJpYXQiOjE3MDE0NjU2NTR9.Mzoe5jyZfE3O52ZSJGtfsceQIlT_1JMwPE7PnGYKm-k"
        string cesium:projectDefaultIonAccessTokenId = ""
    }
}

